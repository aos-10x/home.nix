nsh_rust () {
  if [ ! -f "shell.nix" ]; then
    cat <<EOF > shell.nix
let
  rust = import (builtins.fetchTarball
      "https://github.com/oxalica/rust-overlay/archive/master.tar.gz");
  pkgs = import <nixpkgs> { overlays = [ rust ]; };
in
with pkgs;
mkShell {
  buildInputs = [
    rust-bin.stable.latest.default
  ];
}
EOF

  echo 'shell.nix created'
  fi
}

# This script fixes the issue with Yubikey stored GPG keys where it "caches"
# the saved key locally. If you have multiple yubikeys that are exact copies of
# each other, GPG will think you are using the wrong key.
# See: https://security.stackexchange.com/a/223055
yk_gpg_fix () {
  gpg -K --with-keygrip FF404ABD083C84EC | grep Keygrip | cut  -d' ' -f9 |
    xargs printf -- '/home/aos/.gnupg/private-keys-v1.d/%s.key\n' | xargs rm 2> /dev/null

  gpg --card-status > /dev/null
}

#note () {
#  local notepad_file='/home/aos/.notepad'
#  local dt="$(date -Iseconds)"
#
#  # Print last 5 commands
#  if [ "$#" -eq 0 ]
#  then
#    grep -v -e '^#' $notepad_file | tail -n 5
#    return 0
#  fi
#
#  # Capture date
#  echo "# $dt" >> $notepad_file
#
#  # Save last command
#  if [ "$1" == '.' ]
#  then
#    echo "$(history | tail -2 | head -1)" >> $notepad_file
#    return 0
#  fi
#
#  # Save command passed in as argument
#  echo "$@" >> $notepad_file
#}

# vim: set ft=sh:
